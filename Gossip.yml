# WARN NOTE: create for this playbook: https://docs.ansible.com/ansible/latest/modules/docker_stack_module.html

version: '3.4'

networks:
  swarm_network:
    driver: overlay
  gossip-net:

services:
  base:
    image: nkernis/gossip:0.0.0
    environment:
      HOST: base
      PORT: 3000
      MODE: base
      NAME: base
      ID: 0
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress # if this no work, use 'host' and every svc need unique port
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == base
        
  member_1:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_1
      PORT: 3000
      MODE: member_1
      NAME: member_1
      ID: 1
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_1

  member_2:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_2
      PORT: 3000
      MODE: member_2
      NAME: member_2
      ID: 2
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_2

  member_3:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_3
      PORT: 3000
      MODE: member_3
      NAME: member_3
      ID: 3
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_3

  member_4:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_4
      PORT: 3000
      MODE: member_4
      NAME: member_4
      ID: 4
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_4

  member_5:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_5
      PORT: 3000
      MODE: member_5
      NAME: member_5
      ID: 5
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_5

  member_6:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_6
      PORT: 3000
      MODE: member_6
      NAME: member_6
      ID: 6
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_6

  member_7:
    depends_on:
      - base
    image: nkernis/gossip:0.0.0
    environment:
      HOST: member_7
      PORT: 3000
      MODE: member_7
      NAME: member_7
      ID: 7
      BASES: base:3000
      PEER_SERVER: base
      PEER_PORT: 3000
    ports:
      - published: 3000
        target: 3000
        mode: ingress
    networks:
      gossip-net:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
            - node.label.gossip == member_7